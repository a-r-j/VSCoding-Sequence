/**
 * Copyright (c) 2019-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Áron Samuel Kovács <aron.kovacs@mail.muni.cz>
 * @author Ludovic Autin <ludovic.autin@gmail.com>
 * @author Gianluca Tomasello <giagitom@gmail.com>
 */
import { WebGLContext } from '../../mol-gl/webgl/context';
import { Texture } from '../../mol-gl/webgl/texture';
import { ParamDefinition as PD } from '../../mol-util/param-definition';
import { RenderTarget } from '../../mol-gl/webgl/render-target';
import { DrawPass } from './draw';
import { ICamera } from '../../mol-canvas3d/camera';
import { PostprocessingProps } from './postprocessing';
export declare const SsaoParams: {
    samples: PD.Numeric;
    multiScale: PD.Mapped<PD.NamedParams<PD.Normalize<unknown>, "off"> | PD.NamedParams<PD.Normalize<{
        levels: PD.Normalize<{
            radius: number;
            bias: number;
        }>[];
        nearThreshold: number;
        farThreshold: number;
    }>, "on">>;
    radius: PD.Numeric;
    bias: PD.Numeric;
    blurKernelSize: PD.Numeric;
    blurDepthBias: PD.Numeric;
    resolutionScale: PD.Numeric;
    color: PD.Color;
};
export type SsaoProps = PD.Values<typeof SsaoParams>;
export declare class SsaoPass {
    private readonly webgl;
    private readonly drawPass;
    static isEnabled(props: PostprocessingProps): boolean;
    readonly target: RenderTarget;
    private readonly ssaoFramebuffer;
    private readonly ssaoBlurFirstPassFramebuffer;
    private readonly ssaoBlurSecondPassFramebuffer;
    private readonly downsampledDepthTarget;
    private readonly downsampleDepthRenderable;
    private readonly depthHalfTarget;
    private readonly depthHalfRenderable;
    private readonly depthQuarterTarget;
    private readonly depthQuarterRenderable;
    readonly ssaoDepthTexture: Texture;
    private readonly ssaoDepthBlurProxyTexture;
    private readonly ssaoRenderable;
    private readonly ssaoBlurFirstPassRenderable;
    private readonly ssaoBlurSecondPassRenderable;
    private nSamples;
    private blurKernelSize;
    private texSize;
    private ssaoScale;
    private calcSsaoScale;
    private levels;
    constructor(webgl: WebGLContext, drawPass: DrawPass, width: number, height: number);
    setSize(width: number, height: number): void;
    update(camera: ICamera, props: SsaoProps): void;
    render(camera: ICamera): void;
}
