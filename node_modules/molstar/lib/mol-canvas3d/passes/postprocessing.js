/**
 * Copyright (c) 2019-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Áron Samuel Kovács <aron.kovacs@mail.muni.cz>
 * @author Ludovic Autin <ludovic.autin@gmail.com>
 * @author Gianluca Tomasello <giagitom@gmail.com>
 */
import { QuadSchema, QuadValues } from '../../mol-gl/compute/util';
import { TextureSpec, UniformSpec, DefineSpec } from '../../mol-gl/renderable/schema';
import { ShaderCode } from '../../mol-gl/shader-code';
import { ValueCell } from '../../mol-util';
import { createComputeRenderItem } from '../../mol-gl/webgl/render-item';
import { createComputeRenderable } from '../../mol-gl/renderable';
import { Mat4, Vec2, Vec3 } from '../../mol-math/linear-algebra';
import { ParamDefinition as PD } from '../../mol-util/param-definition';
import { quad_vert } from '../../mol-gl/shader/quad.vert';
import { postprocessing_frag } from '../../mol-gl/shader/postprocessing.frag';
import { Color } from '../../mol-util/color';
import { FxaaParams, FxaaPass } from './fxaa';
import { SmaaParams, SmaaPass } from './smaa';
import { isTimingMode } from '../../mol-util/debug';
import { BackgroundParams, BackgroundPass } from './background';
import { CasParams, CasPass } from './cas';
import { DofParams } from './dof';
import { BloomParams } from './bloom';
import { OutlinePass, OutlineParams } from './outline';
import { ShadowPass, ShadowParams } from './shadow';
import { SsaoPass, SsaoParams } from './ssao';
const PostprocessingSchema = {
    ...QuadSchema,
    tSsaoDepth: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),
    tColor: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),
    tDepthOpaque: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),
    tShadows: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),
    tOutlines: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),
    uTexSize: UniformSpec('v2'),
    dOrthographic: DefineSpec('number'),
    uNear: UniformSpec('f'),
    uFar: UniformSpec('f'),
    uFogNear: UniformSpec('f'),
    uFogFar: UniformSpec('f'),
    uFogColor: UniformSpec('v3'),
    uOutlineColor: UniformSpec('v3'),
    uOcclusionColor: UniformSpec('v3'),
    uTransparentBackground: UniformSpec('b'),
    dOcclusionEnable: DefineSpec('boolean'),
    uOcclusionOffset: UniformSpec('v2'),
    dShadowEnable: DefineSpec('boolean'),
    dOutlineEnable: DefineSpec('boolean'),
    dOutlineScale: DefineSpec('number'),
    dTransparentOutline: DefineSpec('boolean'),
};
function getPostprocessingRenderable(ctx, colorTexture, depthTextureOpaque, shadowsTexture, outlinesTexture, ssaoDepthTexture, transparentOutline) {
    const values = {
        ...QuadValues,
        tSsaoDepth: ValueCell.create(ssaoDepthTexture),
        tColor: ValueCell.create(colorTexture),
        tDepthOpaque: ValueCell.create(depthTextureOpaque),
        tShadows: ValueCell.create(shadowsTexture),
        tOutlines: ValueCell.create(outlinesTexture),
        uTexSize: ValueCell.create(Vec2.create(colorTexture.getWidth(), colorTexture.getHeight())),
        dOrthographic: ValueCell.create(0),
        uNear: ValueCell.create(1),
        uFar: ValueCell.create(10000),
        uFogNear: ValueCell.create(10000),
        uFogFar: ValueCell.create(10000),
        uFogColor: ValueCell.create(Vec3.create(1, 1, 1)),
        uOutlineColor: ValueCell.create(Vec3.create(0, 0, 0)),
        uOcclusionColor: ValueCell.create(Vec3.create(0, 0, 0)),
        uTransparentBackground: ValueCell.create(false),
        dOcclusionEnable: ValueCell.create(true),
        uOcclusionOffset: ValueCell.create(Vec2.create(0, 0)),
        dShadowEnable: ValueCell.create(false),
        dOutlineEnable: ValueCell.create(false),
        dOutlineScale: ValueCell.create(1),
        dTransparentOutline: ValueCell.create(transparentOutline),
    };
    const schema = { ...PostprocessingSchema };
    const shaderCode = ShaderCode('postprocessing', quad_vert, postprocessing_frag);
    const renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);
    return createComputeRenderable(renderItem, values);
}
export const PostprocessingParams = {
    occlusion: PD.MappedStatic('on', {
        on: PD.Group(SsaoParams),
        off: PD.Group({})
    }, { cycle: true, description: 'Darken occluded crevices with the ambient occlusion effect' }),
    shadow: PD.MappedStatic('off', {
        on: PD.Group(ShadowParams),
        off: PD.Group({})
    }, { cycle: true, description: 'Simplistic shadows' }),
    outline: PD.MappedStatic('off', {
        on: PD.Group(OutlineParams),
        off: PD.Group({})
    }, { cycle: true, description: 'Draw outline around 3D objects' }),
    dof: PD.MappedStatic('off', {
        on: PD.Group(DofParams),
        off: PD.Group({})
    }, { cycle: true, description: 'DOF' }),
    antialiasing: PD.MappedStatic('smaa', {
        fxaa: PD.Group(FxaaParams),
        smaa: PD.Group(SmaaParams),
        off: PD.Group({})
    }, { options: [['fxaa', 'FXAA'], ['smaa', 'SMAA'], ['off', 'Off']], description: 'Smooth pixel edges' }),
    sharpening: PD.MappedStatic('off', {
        on: PD.Group(CasParams),
        off: PD.Group({})
    }, { cycle: true, description: 'Contrast Adaptive Sharpening' }),
    background: PD.Group(BackgroundParams, { isFlat: true }),
    bloom: PD.MappedStatic('on', {
        on: PD.Group(BloomParams),
        off: PD.Group({})
    }, { cycle: true, description: 'Bloom' }),
};
export class PostprocessingPass {
    static isEnabled(props) {
        return SsaoPass.isEnabled(props) || ShadowPass.isEnabled(props) || OutlinePass.isEnabled(props) || props.background.variant.name !== 'off';
    }
    static isTransparentOutlineEnabled(props) {
        return OutlinePass.isEnabled(props) && props.outline.params.includeTransparent;
    }
    constructor(webgl, assetManager, drawPass) {
        this.webgl = webgl;
        this.drawPass = drawPass;
        this.bgColor = Vec3();
        this.occlusionOffset = [0, 0];
        this.transparentBackground = false;
        const { colorTarget, depthTextureOpaque } = drawPass;
        const width = colorTarget.getWidth();
        const height = colorTarget.getHeight();
        // needs to be linear for anti-aliasing pass
        this.target = webgl.createRenderTarget(width, height, false, 'uint8', 'linear');
        this.ssao = new SsaoPass(webgl, drawPass, width, height);
        this.shadow = new ShadowPass(webgl, drawPass, width, height);
        this.outline = new OutlinePass(webgl, drawPass, width, height);
        this.renderable = getPostprocessingRenderable(webgl, colorTarget.texture, depthTextureOpaque, this.shadow.shadowsTarget.texture, this.outline.outlinesTarget.texture, this.ssao.ssaoDepthTexture, true);
        this.background = new BackgroundPass(webgl, assetManager, width, height);
    }
    setSize(width, height) {
        const [w, h] = this.renderable.values.uTexSize.ref.value;
        if (width !== w || height !== h) {
            this.target.setSize(width, height);
            ValueCell.update(this.renderable.values.uTexSize, Vec2.set(this.renderable.values.uTexSize.ref.value, width, height));
        }
        this.ssao.setSize(width, height);
        this.shadow.setSize(width, height);
        this.outline.setSize(width, height);
        this.background.setSize(width, height);
    }
    updateState(camera, transparentBackground, backgroundColor, props, light) {
        var _a;
        let needsUpdateMain = false;
        const orthographic = camera.state.mode === 'orthographic' ? 1 : 0;
        const outlinesEnabled = OutlinePass.isEnabled(props);
        const shadowsEnabled = ShadowPass.isEnabled(props);
        const occlusionEnabled = SsaoPass.isEnabled(props);
        const invProjection = Mat4.identity();
        Mat4.invert(invProjection, camera.projection);
        if (occlusionEnabled) {
            this.ssao.update(camera, props.occlusion.params);
        }
        if (shadowsEnabled) {
            this.shadow.update(camera, light, props.shadow.params);
        }
        if (outlinesEnabled) {
            const outlineProps = props.outline.params;
            this.outline.update(camera, outlineProps);
            const transparentOutline = (_a = outlineProps.includeTransparent) !== null && _a !== void 0 ? _a : true;
            const outlineScale = Math.max(1, Math.round(outlineProps.scale * this.webgl.pixelRatio)) - 1;
            ValueCell.update(this.renderable.values.uOutlineColor, Color.toVec3Normalized(this.renderable.values.uOutlineColor.ref.value, outlineProps.color));
            if (this.renderable.values.dOutlineScale.ref.value !== outlineScale) {
                needsUpdateMain = true;
                ValueCell.update(this.renderable.values.dOutlineScale, outlineScale);
            }
            if (this.renderable.values.dTransparentOutline.ref.value !== transparentOutline) {
                needsUpdateMain = true;
                ValueCell.update(this.renderable.values.dTransparentOutline, transparentOutline);
            }
        }
        ValueCell.updateIfChanged(this.renderable.values.uFar, camera.far);
        ValueCell.updateIfChanged(this.renderable.values.uNear, camera.near);
        ValueCell.updateIfChanged(this.renderable.values.uFogFar, camera.fogFar);
        ValueCell.updateIfChanged(this.renderable.values.uFogNear, camera.fogNear);
        ValueCell.update(this.renderable.values.uFogColor, Color.toVec3Normalized(this.renderable.values.uFogColor.ref.value, backgroundColor));
        ValueCell.updateIfChanged(this.renderable.values.uTransparentBackground, transparentBackground);
        if (this.renderable.values.dOrthographic.ref.value !== orthographic) {
            needsUpdateMain = true;
            ValueCell.update(this.renderable.values.dOrthographic, orthographic);
        }
        if (this.renderable.values.dOutlineEnable.ref.value !== outlinesEnabled) {
            needsUpdateMain = true;
            ValueCell.update(this.renderable.values.dOutlineEnable, outlinesEnabled);
        }
        if (this.renderable.values.dShadowEnable.ref.value !== shadowsEnabled) {
            needsUpdateMain = true;
            ValueCell.update(this.renderable.values.dShadowEnable, shadowsEnabled);
        }
        if (this.renderable.values.dOcclusionEnable.ref.value !== occlusionEnabled) {
            needsUpdateMain = true;
            ValueCell.update(this.renderable.values.dOcclusionEnable, occlusionEnabled);
        }
        if (needsUpdateMain) {
            this.renderable.update();
        }
        const { gl, state } = this.webgl;
        state.enable(gl.SCISSOR_TEST);
        state.disable(gl.BLEND);
        state.disable(gl.DEPTH_TEST);
        state.depthMask(false);
    }
    setOcclusionOffset(x, y) {
        this.occlusionOffset[0] = x;
        this.occlusionOffset[1] = y;
        ValueCell.update(this.renderable.values.uOcclusionOffset, Vec2.set(this.renderable.values.uOcclusionOffset.ref.value, x, y));
    }
    setTransparentBackground(value) {
        this.transparentBackground = value;
    }
    render(camera, toDrawingBuffer, transparentBackground, backgroundColor, props, light) {
        if (isTimingMode)
            this.webgl.timer.mark('PostprocessingPass.render');
        this.updateState(camera, transparentBackground, backgroundColor, props, light);
        const { gl, state } = this.webgl;
        const { x, y, width, height } = camera.viewport;
        // don't render occlusion if offset is given,
        // which will reuse the existing occlusion
        if (props.occlusion.name === 'on' && this.occlusionOffset[0] === 0 && this.occlusionOffset[1] === 0) {
            this.ssao.render(camera);
        }
        state.viewport(x, y, width, height);
        state.scissor(x, y, width, height);
        if (props.outline.name === 'on') {
            this.outline.render();
        }
        if (props.shadow.name === 'on') {
            this.shadow.render();
        }
        if (toDrawingBuffer) {
            this.webgl.unbindFramebuffer();
        }
        else {
            this.target.bind();
        }
        this.background.update(camera, props.background);
        if (this.background.isEnabled(props.background)) {
            if (this.transparentBackground) {
                state.clearColor(0, 0, 0, 0);
            }
            else {
                Color.toVec3Normalized(this.bgColor, backgroundColor);
                state.clearColor(this.bgColor[0], this.bgColor[1], this.bgColor[2], 1);
            }
            gl.clear(gl.COLOR_BUFFER_BIT);
            state.enable(gl.BLEND);
            state.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            this.background.render();
        }
        else {
            state.clearColor(0, 0, 0, 1);
            gl.clear(gl.COLOR_BUFFER_BIT);
        }
        this.renderable.render();
        if (isTimingMode)
            this.webgl.timer.markEnd('PostprocessingPass.render');
    }
}
export class AntialiasingPass {
    static isEnabled(props) {
        return props.antialiasing.name !== 'off';
    }
    constructor(webgl, width, height) {
        this.target = webgl.createRenderTarget(width, height, false);
        this.internalTarget = webgl.createRenderTarget(width, height, false);
        this.fxaa = new FxaaPass(webgl, this.target.texture);
        this.smaa = new SmaaPass(webgl, this.target.texture);
        this.cas = new CasPass(webgl, this.target.texture);
    }
    setSize(width, height) {
        const w = this.target.texture.getWidth();
        const h = this.target.texture.getHeight();
        if (width !== w || height !== h) {
            this.target.setSize(width, height);
            this.internalTarget.setSize(width, height);
            this.fxaa.setSize(width, height);
            if (this.smaa.supported)
                this.smaa.setSize(width, height);
            this.cas.setSize(width, height);
        }
    }
    _renderFxaa(camera, input, target, props) {
        if (props.antialiasing.name !== 'fxaa')
            return;
        this.fxaa.update(input, props.antialiasing.params);
        this.fxaa.render(camera.viewport, target);
    }
    _renderSmaa(camera, input, target, props) {
        if (props.antialiasing.name !== 'smaa')
            return;
        this.smaa.update(input, props.antialiasing.params);
        this.smaa.render(camera.viewport, target);
    }
    _renderAntialiasing(camera, input, target, props) {
        if (props.antialiasing.name === 'fxaa') {
            this._renderFxaa(camera, input, target, props);
        }
        else if (props.antialiasing.name === 'smaa') {
            this._renderSmaa(camera, input, target, props);
        }
    }
    _renderCas(camera, input, target, props) {
        if (props.sharpening.name !== 'on')
            return;
        if (props.antialiasing.name !== 'off')
            input = this.internalTarget.texture;
        this.cas.update(input, props.sharpening.params);
        this.cas.render(camera.viewport, target);
    }
    render(camera, input, toDrawingBuffer, props) {
        if (props.antialiasing.name === 'off' && props.sharpening.name === 'off')
            return;
        if (props.antialiasing.name === 'smaa' && !this.smaa.supported) {
            console.error('SMAA not supported, missing "HTMLImageElement"');
            return;
        }
        const target = toDrawingBuffer === true
            ? undefined : toDrawingBuffer === false
            ? this.target : toDrawingBuffer;
        if (props.sharpening.name === 'off') {
            this._renderAntialiasing(camera, input, target, props);
        }
        else if (props.antialiasing.name === 'off') {
            this._renderCas(camera, input, target, props);
        }
        else {
            this._renderAntialiasing(camera, input, this.internalTarget, props);
            this._renderCas(camera, input, target, props);
        }
    }
}
